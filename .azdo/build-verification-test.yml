# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main
- features/*

variables:
  solution: '**/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  serviceConnection: 'PUC-Azure-Connection'
  resourceGroup: 'PartsUnlimitedContoso'
  webAppName: 'puc-webapp'
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
  - stage: verification
    jobs:
    - job: linux_verify
      timeoutInMinutes: 10
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: DotNetCoreCLI@2
        name: Restore
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'select'

      - task: DotNetCoreCLI@2
        name: Build
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '-c $(buildConfiguration)'

    - job: win_verify
      timeoutInMinutes: 10
      pool: localmachine
      steps:
      - task: DotNetCoreCLI@2
        name: Restore
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'select'

      - task: DotNetCoreCLI@2
        name: Build
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '-c $(buildConfiguration)'


    - job: generate_linux_artifacts
      timeoutInMinutes: 10
      pool:
        vmImage: 'ubuntu-latest'
      dependsOn: [linux_verify, win_verify]
      steps:
      - task: DotNetCoreCLI@2
        name: Restore
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'select'

      - task: DotNetCoreCLI@2
        displayName: "Publishing"
        inputs:
          command: "publish"
          projects: '$(solution)'
          publishWebProjects: true
          arguments: "-o $(Build.ArtifactStagingDirectory)"

      - task: DotNetCoreCLI@2
        name: Test
        inputs:
          command: 'test'
          projects: '$(solution)'

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: WebApp

  - stage: deployToTest
    jobs:
    - deployment: DeployToTest
      pool:
        vmImage: 'ubuntu-latest'
      displayName: Deploy To Test Env
      environment: PUC-Test
      strategy:
        runOnce:
          deploy:
            steps:
              - bash: tree
                displayName: Where Am I
                workingDirectory: $(Agent.BuildDirectory)

              - task: AzureRmWebAppDeployment@4
                displayName: Deploy App To Test
                inputs:
                  ConnectionType: "AzureRM"
                  azureSubscription: $(serviceConnection)
                  appType: "webAppLinux"
                  WebAppName: $(webAppName)
                  deployToSlotOrASE: true
                  ResourceGroupName: $(resourceGroup)
                  SlotName: "devtest"
                  packageForLinux: "$(Agent.BuildDirectory)/WebApp/web.zip"

  - stage: deployToProd
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    dependsOn: deployToTest
    jobs:
      - deployment: webDeployToProd
        pool:
          vmImage: 'ubuntu-latest'
        displayName: Deploy To Prod Env
        environment: PUC-Production
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureRmWebAppDeployment@4
                  displayName: Deploy App To Test
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: $(serviceConnection)
                    appType: "webAppLinux"
                    WebAppName: $(webAppName)
                    deployToSlotOrASE: true
                    ResourceGroupName: $(resourceGroup)
                    SlotName: "staging"
                    packageForLinux: "$(Agent.BuildDirectory)/WebApp/web.zip"
                - task: AzureAppServiceManage@0
                  inputs:
                    azureSubscription: $(serviceConnection)
                    WebAppName: $(webAppName)
                    SwapWithProduction: true
                    resourceGroupName: $(resourceGroup)
                    Slot: "staging"